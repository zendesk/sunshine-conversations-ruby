=begin
#Sunshine Conversations API

The version of the OpenAPI document: 17.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.12.0
=end

require 'date'
require 'time'

module SunshineConversationsClient
  # Object hosting user profile information.
  class Profile
    # The user's given name (first name).
    attr_accessor :given_name

    # The user's surname (last name).
    attr_accessor :surname

    # The user's email address.
    attr_accessor :email

    # The user's avatar.
    attr_accessor :avatar_url

    # End-user's locale information in BCP 47 format.
    attr_accessor :locale

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'given_name' => :'givenName',
        :'surname' => :'surname',
        :'email' => :'email',
        :'avatar_url' => :'avatarUrl',
        :'locale' => :'locale'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'given_name' => :'String',
        :'surname' => :'String',
        :'email' => :'String',
        :'avatar_url' => :'String',
        :'locale' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'given_name',
        :'surname',
        :'email',
        :'avatar_url',
        :'locale'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SunshineConversationsClient::Profile` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SunshineConversationsClient::Profile`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'given_name')
        self.given_name = attributes[:'given_name']
      end

      if attributes.key?(:'surname')
        self.surname = attributes[:'surname']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'avatar_url')
        self.avatar_url = attributes[:'avatar_url']
      end

      if attributes.key?(:'locale')
        self.locale = attributes[:'locale']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@given_name.nil? && @given_name.to_s.length > 128
        invalid_properties.push('invalid value for "given_name", the character length must be smaller than or equal to 128.')
      end

      if !@given_name.nil? && @given_name.to_s.length < 1
        invalid_properties.push('invalid value for "given_name", the character length must be great than or equal to 1.')
      end

      if !@surname.nil? && @surname.to_s.length > 128
        invalid_properties.push('invalid value for "surname", the character length must be smaller than or equal to 128.')
      end

      if !@surname.nil? && @surname.to_s.length < 1
        invalid_properties.push('invalid value for "surname", the character length must be great than or equal to 1.')
      end

      if !@email.nil? && @email.to_s.length > 128
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 128.')
      end

      if !@email.nil? && @email.to_s.length < 1
        invalid_properties.push('invalid value for "email", the character length must be great than or equal to 1.')
      end

      if !@avatar_url.nil? && @avatar_url.to_s.length > 2048
        invalid_properties.push('invalid value for "avatar_url", the character length must be smaller than or equal to 2048.')
      end

      if !@avatar_url.nil? && @avatar_url.to_s.length < 1
        invalid_properties.push('invalid value for "avatar_url", the character length must be great than or equal to 1.')
      end

      if !@locale.nil? && @locale.to_s.length > 64
        invalid_properties.push('invalid value for "locale", the character length must be smaller than or equal to 64.')
      end

      if !@locale.nil? && @locale.to_s.length < 1
        invalid_properties.push('invalid value for "locale", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@given_name.nil? && @given_name.to_s.length > 128
      return false if !@given_name.nil? && @given_name.to_s.length < 1
      return false if !@surname.nil? && @surname.to_s.length > 128
      return false if !@surname.nil? && @surname.to_s.length < 1
      return false if !@email.nil? && @email.to_s.length > 128
      return false if !@email.nil? && @email.to_s.length < 1
      return false if !@avatar_url.nil? && @avatar_url.to_s.length > 2048
      return false if !@avatar_url.nil? && @avatar_url.to_s.length < 1
      return false if !@locale.nil? && @locale.to_s.length > 64
      return false if !@locale.nil? && @locale.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] given_name Value to be assigned
    def given_name=(given_name)
      if !given_name.nil? && given_name.to_s.length > 128
        fail ArgumentError, 'invalid value for "given_name", the character length must be smaller than or equal to 128.'
      end

      if !given_name.nil? && given_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "given_name", the character length must be great than or equal to 1.'
      end

      @given_name = given_name
    end

    # Custom attribute writer method with validation
    # @param [Object] surname Value to be assigned
    def surname=(surname)
      if !surname.nil? && surname.to_s.length > 128
        fail ArgumentError, 'invalid value for "surname", the character length must be smaller than or equal to 128.'
      end

      if !surname.nil? && surname.to_s.length < 1
        fail ArgumentError, 'invalid value for "surname", the character length must be great than or equal to 1.'
      end

      @surname = surname
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email.to_s.length > 128
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 128.'
      end

      if !email.nil? && email.to_s.length < 1
        fail ArgumentError, 'invalid value for "email", the character length must be great than or equal to 1.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] avatar_url Value to be assigned
    def avatar_url=(avatar_url)
      if !avatar_url.nil? && avatar_url.to_s.length > 2048
        fail ArgumentError, 'invalid value for "avatar_url", the character length must be smaller than or equal to 2048.'
      end

      if !avatar_url.nil? && avatar_url.to_s.length < 1
        fail ArgumentError, 'invalid value for "avatar_url", the character length must be great than or equal to 1.'
      end

      @avatar_url = avatar_url
    end

    # Custom attribute writer method with validation
    # @param [Object] locale Value to be assigned
    def locale=(locale)
      if !locale.nil? && locale.to_s.length > 64
        fail ArgumentError, 'invalid value for "locale", the character length must be smaller than or equal to 64.'
      end

      if !locale.nil? && locale.to_s.length < 1
        fail ArgumentError, 'invalid value for "locale", the character length must be great than or equal to 1.'
      end

      @locale = locale
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          given_name == o.given_name &&
          surname == o.surname &&
          email == o.email &&
          avatar_url == o.avatar_url &&
          locale == o.locale
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [given_namesurnameemailavatar_urllocale].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SunshineConversationsClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
